type DailyCheckInResponse = record {
  bonus_points : nat64;
  total_points : nat64;
  next_claim_available_at : nat64;
  success : bool;
  points_earned : nat64;
  consecutive_days : nat64;
};
type TaskConfig = record {
  title : text;
  description : text;
  enabled : bool;
  consecutive_days_bonus_multiplier : nat64;
  base_points : nat64;
  max_consecutive_bonus_days : nat64;
};
type TaskVerificationRequest = record {
  task_id : text;
  user : principal;
  timestamp : nat64;
  proof : opt text;
};
type TaskVerificationResponse = record {
  message : text;
  verification_data : opt VerificationData;
  success : bool;
};
type Value = variant {
  Int : int64;
  Map : vec record { text; Value };
  Nat : nat64;
  Blob : blob;
  Bool : bool;
  Null;
  Text : text;
  Float : float64;
  Principal : principal;
  Array : vec Value;
};
type VerificationData = record {
  task_id : text;
  metadata : vec record { text; text };
  completion_timestamp : nat64;
  points_earned : nat64;
};
service : () -> {
  add_admin : (principal) -> ();
  award_points : (principal, nat64, text) -> ();
  claim_daily_check_in : () -> (DailyCheckInResponse);
  get_admins : () -> (vec principal) query;
  get_checkin_status : (principal) -> (vec record { text; text }) query;
  get_my_checkin_status : () -> (vec record { text; text }) query;
  get_task_config : () -> (TaskConfig) query;
  get_user_rewards : (principal) -> (vec record { text; Value }) query;
  remove_admin : (principal) -> ();
  reset_user_streak : (principal) -> ();
  update_task_config : (TaskConfig) -> ();
  verify_task : (TaskVerificationRequest) -> (TaskVerificationResponse);
}
